```markdown
<!-- 
This document organizes information about the Model Context Protocol (MCP) and its components, 
focusing on the server aspect but also covering the ecosystem. It integrates details from 
the specification, introduction, architecture, features, SDKs, and specific server examples.
-->

# Model Context Protocol (MCP) - Uma Visão Geral Organizada

<!-- 
Section: Introduction
Goal: Define MCP, explain its purpose, benefits, and high-level architecture.
Source: Specification, Introduction
-->

## O que é o MCP?

O **Model Context Protocol (MCP)** ([modelcontextprotocol.io](https://modelcontextprotocol.io)) é um protocolo aberto projetado para padronizar a integração entre aplicações de Modelos de Linguagem Grandes (LLMs) e fontes de dados externas, ferramentas e capacidades. Ele funciona como uma "porta USB-C" para aplicações de IA, oferecendo uma maneira padronizada de conectar LLMs ao contexto de que precisam.

**Inspiração:** O MCP se inspira no [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/), que padronizou o suporte a linguagens de programação em ferramentas de desenvolvimento. Da mesma forma, o MCP visa padronizar a integração de contexto e ferramentas no ecossistema de aplicações de IA.

**Benefícios:**
*   Permite que aplicações compartilhem informações contextuais com LLMs.
*   Expõe ferramentas e capacidades para sistemas de IA.
*   Facilita a construção de integrações e fluxos de trabalho componíveis.
*   Oferece uma lista crescente de integrações pré-construídas.
*   Proporciona flexibilidade para alternar entre provedores de LLM.
*   Promove melhores práticas para proteger dados dentro da infraestrutura.

## Arquitetura Geral

O MCP segue uma arquitetura cliente-servidor:

```mermaid
flowchart LR
    subgraph "Seu Computador"
        Host["Host com Cliente MCP\n(Claude Desktop, IDEs, Ferramentas)"]
        S1["Servidor MCP A"]
        S2["Servidor MCP B"]
        S3["Servidor MCP C"]
        Host <-->|"Protocolo MCP"| S1
        Host <-->|"Protocolo MCP"| S2
        Host <-->|"Protocolo MCP"| S3
        S1 <--> D1[("Fonte de Dados\nLocal A")]
        S2 <--> D2[("Fonte de Dados\nLocal B")]
    end
    subgraph "Internet"
        S3 <-->|"APIs Web"| D3[("Serviço Remoto\nC")]
    end
```

*   **Hosts MCP**: Aplicações (como Claude Desktop, IDEs, ferramentas de IA) que iniciam conexões e utilizam os dados/ferramentas fornecidos pelos servidores.
*   **Clientes MCP**: Componentes dentro do Host que mantêm conexões 1:1 com Servidores MCP.
*   **Servidores MCP**: Programas leves que expõem capacidades específicas (dados, ferramentas) através do protocolo MCP padronizado. Podem acessar fontes de dados locais ou remotas.
*   **Fontes de Dados Locais**: Arquivos, bancos de dados e serviços no computador do usuário que os servidores MCP podem acessar com segurança.
*   **Serviços Remotos**: Sistemas externos acessíveis pela internet (via APIs) que os servidores MCP podem utilizar.

<!-- 
Section: Core Architecture Details
Goal: Explain the underlying protocol (JSON-RPC), layers, message types, and connection lifecycle.
Source: Specification, Core architecture
-->

## Detalhes da Arquitetura Central

### Protocolo Base

*   **Formato de Mensagem:** [JSON-RPC 2.0](https://www.jsonrpc.org/). O MCP define métodos e estruturas específicas sobre o JSON-RPC.
*   **Conexões:** Stateful (mantêm estado durante a conexão).
*   **Negociação:** Clientes e Servidores negociam suas capacidades durante a inicialização da conexão.

### Camadas

1.  **Camada de Protocolo:** Lida com o enquadramento de mensagens, vinculação de requisição/resposta e padrões de comunicação de alto nível. Define as mensagens MCP específicas (como `initialize`, `tools/list`, `resource/read`).
2.  **Camada de Transporte:** Lida com a comunicação real entre Clientes e Servidores. É responsável por converter mensagens MCP para o formato JSON-RPC e vice-versa.

### Tipos de Mensagem (JSON-RPC)

1.  **Requests (Requisições):** Esperam uma resposta. Contêm `jsonrpc: "2.0"`, `id`, `method`, e `params` (opcional).
    ```typescript
    interface Request {
      method: string;
      params?: { ... };
    }
    ```
2.  **Results (Resultados):** Respostas bem-sucedidas a requisições. Contêm `jsonrpc: "2.0"`, `id`, e `result`.
    ```typescript
    interface Result {
      [key: string]: unknown;
    }
    ```
3.  **Errors (Erros):** Indicam falha em uma requisição. Contêm `jsonrpc: "2.0"`, `id`, e `error` (com `code`, `message`, `data` opcional).
    ```typescript
    interface Error {
      code: number;
      message: string;
      data?: unknown;
    }
    ```
    *   **Códigos de Erro Padrão:** Incluem os códigos JSON-RPC (`-32700` a `-32600`) e permitem códigos específicos da aplicação acima de `-32000`.
4.  **Notifications (Notificações):** Mensagens unidirecionais que não esperam resposta. Contêm `jsonrpc: "2.0"`, `method`, e `params` (opcional).
    ```typescript
    interface Notification {
      method: string;
      params?: { ... };
    }
    ```

### Ciclo de Vida da Conexão

1.  **Inicialização:**
    ```mermaid
    sequenceDiagram
        participant Client
        participant Server

        Client->>Server: initialize request (versão, capacidades do cliente)
        Server->>Client: initialize response (versão, capacidades do servidor)
        Client->>Server: initialized notification (confirmação)

        Note over Client,Server: Conexão pronta para uso
    ```
2.  **Troca de Mensagens:** Clientes e Servidores trocam Requisições, Resultados, Erros e Notificações conforme necessário.
3.  **Término:** A conexão pode ser encerrada por qualquer uma das partes (`close()`, desconexão do transporte, erros).

<!-- 
Section: Key Features
Goal: Detail the main functionalities offered by MCP Servers and Clients.
Source: Specification, Tools, Roots
-->

## Funcionalidades Chave

### Funcionalidades do Servidor

Os Servidores MCP oferecem uma ou mais das seguintes funcionalidades aos Clientes:

1.  **Resources (Recursos):**
    *   **O que são:** Contexto e dados que o usuário ou o modelo de IA podem usar. Podem ser arquivos, registros de banco de dados, respostas de API, dados de sistema, etc.
    *   **Como funciona:** Clientes podem listar (`resources/list`) e ler (`resources/read`) recursos expostos pelo servidor.
    *   **Exemplo:** Um servidor pode expor o conteúdo de arquivos em um projeto (`file:///path/to/file`) ou dados de uma API (`api://service/endpoint`).
    *   **Atualizações:** Servidores podem notificar clientes sobre mudanças nos recursos (`notifications/resources/list_changed`, `notifications/resources/subscribed_changed`).

2.  **Prompts (Modelos de Interação):**
    *   **O que são:** Mensagens e fluxos de trabalho pré-definidos para usuários ou para guiar o LLM. Podem ser comandos rápidos, templates de tarefas comuns, etc.
    *   **Como funciona:** Clientes listam (`prompts/list`) e obtêm (`prompts/get`) prompts para apresentar ao usuário ou usar na interação com o LLM.
    *   **Controle:** Geralmente controlados pelo *usuário* (ex: escolher um comando em um menu).
    *   **Exemplo:** Um servidor pode oferecer um prompt "Resumir Texto Selecionado" ou "Analisar Dados do CSV".

3.  **Tools (Ferramentas):**
    *   **O que são:** Funções executáveis que o *modelo de IA* pode invocar (com aprovação do usuário) para realizar ações ou interagir com sistemas externos.
    *   **Como funciona:**
        *   **Descoberta:** Clientes listam ferramentas disponíveis (`tools/list`).
        *   **Invocação:** O LLM (via cliente) chama uma ferramenta (`tools/call`) com argumentos específicos. O servidor executa a lógica e retorna um resultado.
    *   **Controle:** Projetadas para serem controladas pelo *modelo* (Model-controlled).
    *   **Estrutura da Definição:**
        ```typescript
        {
          name: string;          // Identificador único
          description?: string;  // Descrição para o LLM/usuário
          inputSchema: {         // JSON Schema para os parâmetros de entrada
            type: "object",
            properties: { ... }
          },
          annotations?: {        // Metadados/dicas sobre o comportamento (NÃO para segurança)
            title?: string;      // Título legível por humanos (para UI)
            readOnlyHint?: boolean;    // Dica: não modifica o ambiente (default: false)
            destructiveHint?: boolean; // Dica: pode fazer atualizações destrutivas (default: true se não readOnly)
            idempotentHint?: boolean;  // Dica: chamadas repetidas com mesmos args não têm efeito adicional (default: false)
            openWorldHint?: boolean;   // Dica: interage com entidades externas (default: true)
          }
        }
        ```
    *   **Implementação (Exemplo Python - FastMCP):**
        ```python
        # server.py
        from mcp.server.fastmcp import FastMCP

        mcp = FastMCP("Calculadora Simples")

        @mcp.tool(
            annotations={ # Exemplo de anotações
                "title": "Somar Números",
                "readOnlyHint": True, 
                "openWorldHint": False
            }
        )
        def add(a: int, b: int) -> int:
            """Soma dois números inteiros."""
            return a + b
        ```
    *   **Tratamento de Erros:** Erros *durante a execução da ferramenta* devem ser retornados dentro do `CallToolResult` com `isError: true` e uma descrição no `content`, permitindo que o LLM veja o erro. Erros de protocolo (ex: ferramenta não encontrada) são tratados como erros JSON-RPC normais.
    *   **Atualizações:** Servidores podem notificar mudanças na lista de ferramentas (`notifications/tools/list_changed`).
    *   **Segurança:** Ferramentas representam execução de código arbitrário e exigem **extrema cautela** e **consentimento explícito do usuário** antes da invocação. As anotações são apenas dicas e **NÃO DEVEM** ser usadas para decisões de segurança.

### Funcionalidade do Cliente

Os Clientes podem oferecer a seguinte funcionalidade aos Servidores:

1.  **Sampling (Amostragem):**
    *   **O que é:** Permite que o *Servidor* inicie comportamentos agênticos ou interações recursivas com o LLM, solicitando que o Cliente gere uma resposta do modelo.
    *   **Como funciona:** O Servidor envia uma requisição (`sampling/createMessage`) para o Cliente, que (com aprovação do usuário) interage com o LLM e retorna o resultado.
    *   **Controle do Usuário:** O usuário DEVE aprovar explicitamente as requisições de sampling, controlar o prompt real enviado e o que o servidor pode ver do resultado.

### Conceito Adicional: Roots (Raízes)

*   **O que são:** URIs (geralmente caminhos de sistema de arquivos como `file:///...` ou URLs `https://...`) que o Cliente sugere ao Servidor como áreas de foco relevantes (ex: diretório do projeto, endpoint de API).
*   **Propósito:** Guiar o Servidor, organizar o trabalho, definir limites operacionais (informativos, não estritamente impostos pelo protocolo).
*   **Como funciona:** Clientes que suportam `roots` os declaram na inicialização e podem notificar sobre mudanças. Servidores DEVEM tentar respeitar esses limites.

<!-- 
Section: Transports
Goal: Detail the communication mechanisms (stdio, SSE) and custom transport possibilities.
Source: Transports
-->

## Transportes (Comunicação)

O transporte é a camada que lida com o envio e recebimento físico das mensagens JSON-RPC entre Cliente e Servidor.

### Tipos de Transporte Padrão

1.  **Stdio (Standard Input/Output):**
    *   **Como funciona:** Usa os fluxos de entrada e saída padrão do processo para comunicação.
    *   **Ideal para:** Integrações locais (Cliente e Servidor na mesma máquina), ferramentas de linha de comando.
    *   **Exemplo (Python - Servidor):**
        ```python
        # server.py (com mcp.server.lowlevel)
        import asyncio
        import mcp.server.stdio
        from mcp.server import Server

        app = Server("meu-servidor-stdio")
        # ... definir handlers ...

        async def main():
            async with mcp.server.stdio.stdio_server() as streams:
                await app.run(streams[0], streams[1], app.create_initialization_options())

        if __name__ == "__main__":
            asyncio.run(main())
        ```

2.  **HTTP com SSE (Server-Sent Events):**
    *   **Como funciona:** Usa SSE para mensagens do Servidor para o Cliente (streaming) e HTTP POST para mensagens do Cliente para o Servidor.
    *   **Ideal para:** Cenários que exigem compatibilidade HTTP, comunicação remota (com ressalvas de segurança).
    *   **⚠️ Aviso de Segurança: Ataques de DNS Rebinding:** Implementações de servidor SSE devem:
        *   **Validar estritamente o cabeçalho `Origin`** das conexões recebidas.
        *   **Evitar bind em `0.0.0.0`** para servidores locais; preferir `127.0.0.1`.
        *   Implementar autenticação adequada.
        *   Sem essas proteções, um site malicioso remoto poderia usar DNS rebinding para se comunicar com servidores MCP locais não protegidos.
    *   **Exemplo (Python - Servidor com Starlette):**
        ```python
        # server_sse.py
        from mcp.server import Server
        from mcp.server.sse import SseServerTransport
        from starlette.applications import Starlette
        from starlette.routing import Route

        app = Server("meu-servidor-sse")
        sse = SseServerTransport("/messages") # Endpoint para POST do cliente
        # ... definir handlers para 'app' ...

        async def handle_sse(scope, receive, send): # Endpoint para conexão SSE
            async with sse.connect_sse(scope, receive, send) as streams:
                await app.run(streams[0], streams[1], app.create_initialization_options())

        async def handle_messages(scope, receive, send): # Handler para POST do cliente
            await sse.handle_post_message(scope, receive, send)

        starlette_app = Starlette(
            routes=[
                Route("/sse", endpoint=handle_sse), # GET para SSE
                Route("/messages", endpoint=handle_messages, methods=["POST"]), # POST para cliente->servidor
            ]
        )
        # Rodar com um servidor ASGI como uvicorn: uvicorn server_sse:starlette_app
        ```

### Transportes Personalizados

O MCP permite a implementação de transportes customizados para protocolos específicos ou canais de comunicação. Devem aderir à interface `Transport` definida pelos SDKs.

<!-- 
Section: Security and Trust & Safety
Goal: Highlight the critical security considerations for implementers.
Source: Specification
-->

## Segurança e Confiança (Trust & Safety)

MCP habilita capacidades poderosas (acesso a dados, execução de código) e, portanto, exige **considerações cuidadosas de segurança** por parte de todos os implementadores.

### Princípios Chave

1.  **Consentimento e Controle do Usuário:**
    *   Usuários **DEVEM** consentir explicitamente e entender todo acesso a dados e operações.
    *   Usuários **DEVEM** manter o controle sobre quais dados são compartilhados e quais ações são tomadas.
    *   Implementadores **DEVEM** fornecer UIs claras para revisão e autorização.
2.  **Privacidade de Dados:**
    *   Hosts **DEVEM** obter consentimento explícito antes de expor dados do usuário a servidores.
    *   Hosts **NÃO DEVEM** transmitir dados de recursos para outros lugares sem consentimento.
    *   Dados do usuário **DEVEM** ser protegidos com controles de acesso apropriados.
3.  **Segurança de Ferramentas (Tool Safety):**
    *   Ferramentas representam execução de código arbitrário e **DEVEM** ser tratadas com extrema cautela.
    *   Descrições e anotações de ferramentas **DEVEM** ser consideradas não confiáveis, a menos que venham de um servidor confiável.
    *   Hosts **DEVEM** obter consentimento explícito do usuário antes de invocar *qualquer* ferramenta.
    *   Usuários **DEVEM** entender o que cada ferramenta faz antes de autorizar seu uso.
4.  **Controles de Sampling LLM:**
    *   Usuários **DEVEM** aprovar explicitamente quaisquer requisições de sampling.
    *   Usuários **DEVEM** controlar se o sampling ocorre, o prompt real enviado e quais resultados o servidor pode ver.

### Diretrizes de Implementação

Embora o protocolo em si não possa impor esses princípios, os implementadores **DEVEM (SHOULD)**:
1.  Construir fluxos robustos de consentimento e autorização.
2.  Fornecer documentação clara das implicações de segurança.
3.  Implementar controles de acesso e proteções de dados apropriados.
4.  Seguir as melhores práticas de segurança em suas integrações.
5.  Considerar as implicações de privacidade no design de suas funcionalidades.

<!-- 
Section: Development & Usage
Goal: Provide practical information on using SDKs, building with LLMs, and specific examples.
Source: Python SDK README, Building MCP with LLMs, GitHub Server README, Supabase Server Blog/README
-->

## Desenvolvimento e Uso

### SDKs

SDKs facilitam a construção de Clientes e Servidores MCP.

*   **Python SDK (`mcp`)**: ([GitHub](https://github.com/modelcontextprotocol/python-sdk))
    *   **Instalação:** `uv add "mcp[cli]"` ou `pip install "mcp[cli]"`
    *   **FastMCP:** Interface de alto nível para criar servidores rapidamente.
        ```python
        # server.py
        from mcp.server.fastmcp import FastMCP, Context, Image
        from mcp.server.fastmcp.prompts import base

        mcp = FastMCP("MeuServidorDemo")

        # Recurso
        @mcp.resource("config://app")
        def get_config() -> str:
            return "Configuração da App"

        # Ferramenta
        @mcp.tool()
        def calcular_imc(peso_kg: float, altura_m: float) -> float:
            """Calcula o IMC."""
            return peso_kg / (altura_m**2)

        # Prompt
        @mcp.prompt()
        def revisar_codigo(codigo: str) -> list[base.Message]:
            return [
                base.UserMessage(f"Por favor, revise este código:\n\n{codigo}"),
                base.AssistantMessage("Claro, analisando o código...")
            ]

        # Usando Contexto (ler recurso, reportar progresso)
        @mcp.tool()
        async def processar_arquivo(caminho: str, ctx: Context) -> str:
             ctx.info(f"Lendo arquivo {caminho}")
             conteudo, _ = await ctx.read_resource(f"file://{caminho}")
             # ... processar ...
             await ctx.report_progress(50, 100) # 50% completo
             return "Processado"

        if __name__ == "__main__":
            # Roda em modo de desenvolvimento com Inspector: mcp dev server.py
            # Instala no Claude Desktop: mcp install server.py
            # Roda diretamente (stdio): python server.py ou mcp run server.py
            mcp.run() # Executa o servidor (geralmente via stdio por padrão)
        ```
    *   **Cliente:** O SDK também fornece `ClientSession` para interagir com servidores.
*   **TypeScript SDK (`@modelcontextprotocol/sdk`)**: ([GitHub](https://github.com/modelcontextprotocol/typescript-sdk)) Usado para construir servidores e clientes em Node.js/TypeScript.
*   **C# SDK**: Mencionado como lançado ([Release Note](/development/updates)).

### Construindo Servidores MCP com Ajuda de LLMs

É possível usar LLMs como o Claude para acelerar o desenvolvimento de servidores MCP:

1.  **Forneça Contexto:** Copie a documentação relevante do MCP ([llms-full.txt](https://modelcontextprotocol.io/llms-full.txt), READMEs dos SDKs) para a conversa com o LLM.
2.  **Descreva o Servidor:** Seja específico sobre os recursos, ferramentas, prompts e integrações desejadas.
3.  **Itere:** Comece com o básico, peça explicações, solicite modificações e ajuda com testes e casos extremos.
4.  **Revise e Teste:** Revise cuidadosamente o código gerado e teste-o com ferramentas como o MCP Inspector.

### Ferramentas de Desenvolvimento e Depuração

*   **MCP Inspector:** ([Docs](/docs/tools/inspector)) Ferramenta interativa para testar e inspecionar servidores MCP.
*   **Guia de Depuração:** ([Docs](/docs/tools/debugging)) Dicas para depurar servidores e integrações.
*   **Logging:** Implementar logging detalhado no servidor é crucial para depuração.

### Exemplos de Servidores MCP

#### 1. GitHub MCP Server ([GitHub](https://github.com/github/github-mcp-server))

*   **Propósito:** Integração com APIs do GitHub para automação e interação.
*   **Instalação:** Via Docker (recomendado) ou build a partir do código-fonte (Go). Configurável em clientes como VS Code e Claude Desktop.
*   **Autenticação:** Requer um GitHub Personal Access Token (PAT).
*   **Funcionalidades Principais:**
    *   **Ferramentas (Toolsets Configuráveis):** Gerenciamento de Repositórios (`repos`), Issues (`issues`), Pull Requests (`pull_requests`), Usuários (`users`), Code Security (`code_security`), etc. É possível habilitar/desabilitar conjuntos de ferramentas (`--toolsets` ou `GITHUB_TOOLSETS`). Suporta descoberta dinâmica de toolsets (`--dynamic-toolsets`).
    *   **Recursos:** Conteúdo de repositório (`repo://owner/repo/contents/...`), incluindo branches, commits, tags, PRs.
    *   **Suporte:** GitHub Enterprise Server, internacionalização/override de descrições.

#### 2. Supabase MCP Server ([Blog](https://supabase.com/blog/supabase-mcp-server), [GitHub](https://github.com/supabase-community/supabase-mcp))

*   **Propósito:** Conectar ferramentas de IA (Cursor, Claude) diretamente a projetos Supabase.
*   **Instalação:** Via `npx` (Node.js).
*   **Autenticação:** Requer um Supabase Personal Access Token (PAT). (Autenticação OAuth nativa está no roadmap).
*   **Funcionalidades Principais:**
    *   **Ferramentas:**
        *   Gerenciamento de Projetos (listar, criar, pausar, restaurar).
        *   Operações de Banco de Dados (listar tabelas, executar SQL `execute_sql`, aplicar migrações `apply_migration`, listar extensões/migrações).
        *   Configuração (obter URL/chave anônima).
        *   Logs (`get_logs`).
        *   Branching (criar, listar, deletar, merge, reset, rebase - experimental).
        *   Geração de Tipos TypeScript (`generate_typescript_types`).
        *   Gerenciamento de Edge Functions (listar, deploy).
        *   Confirmação de Custo (`get_cost`, `confirm_cost`).
    *   **Modo Read-Only:** Flag `--read-only` para restringir operações de escrita no banco de dados via SQL.
*   **Servidor Relacionado:** `@supabase/mcp-server-postgrest` para conectar usuários via API REST.

<!-- 
Section: Community & Contributing
Goal: Provide links and information for getting help and contributing.
Source: Introduction, Python SDK README
-->

## Comunidade, Suporte e Contribuição

*   **Discussões e Q&A:**
    *   Especificação: [GitHub Discussions (Spec)](https://github.com/modelcontextprotocol/specification/discussions)
    *   Outros Componentes: [GitHub Discussions (Org)](https://github.com/orgs/modelcontextprotocol/discussions)
*   **Bugs e Features (Código Aberto):** [Criar GitHub Issue](https://github.com/modelcontextprotocol) nos repositórios relevantes (spec, SDKs, etc.).
*   **Suporte Específico Claude:** Para issues relacionadas à integração MCP no Claude.app/claude.ai, veja [How to Get Support](https://support.anthropic.com/en/articles/9015913-how-to-get-support) da Anthropic.
*   **Contribuição:** Veja o [Guia de Contribuição](/development/contributing) para saber como ajudar a melhorar o MCP.

<!-- 
Section: Specification Reference
Goal: Link back to the authoritative source.
Source: Specification
-->

## Referência da Especificação

Para os requisitos autoritativos do protocolo, consulte:

*   **Documento da Especificação:** Detalhes sobre [Arquitetura](architecture), [Protocolo Base](basic), [Funcionalidades do Servidor](server), [Funcionalidades do Cliente](client).
*   **Schema TypeScript:** A definição formal do schema está em [schema.ts](https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-03-26/schema.ts).
*   **BCP 14:** As palavras-chave como MUST, SHOULD, MAY seguem as definições da [BCP 14](https://datatracker.ietf.org/doc/html/bcp14) ([RFC2119](https://datatracker.ietf.org/doc/html/rfc2119), [RFC8174](https://datatracker.ietf.org/doc/html/rfc8174)).

```